theme(strip.text.x = element_text(size=14, face="italic"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) +
scale_x_discrete(breaks=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"), labels=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"))
simpeven
# Make Relative Abundance Matrices
dataREL <- otu_final
for(i in 1:dim(otu_final)[1]){
dataREL[i,] <- otu_final[i,]/sum(otu_final[i,])
}
#PERMANOVA
new.data <-cbind(design_final,dataREL)
adonis = adonis(new.data[,-c(1:3)]~Social.Status*Day, method = "bray", data = new.data, perm=1000, set.seed=42)
adonis
# Principal Coordinates Analysis
dataREL.dist <- vegdist(dataREL, method="bray")
pcoa <- cmdscale(dataREL.dist, k=3, eig=TRUE, add=FALSE)
explainvar1b <- round(pcoa$eig[1] / sum(pcoa$eig), 3) * 100
explainvar2b <- round(pcoa$eig[2] / sum(pcoa$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #37.5
explainvar2b #23.1
pcoa.groups <- paste(new.data$Social.Status, new.data$Day, sep = "_")
pcoa.points <- data.frame(pcoa$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
Social.Status <- c("dominant","dominant","dominant","dominant","subordinate","subordinate","subordinate","subordinate","communal","communal","communal","communal","isolate","isolate","isolate","isolate","water","control")
Day <- c("Day_0","Day_0","Day_0","Day_0","Day_0","Day_0","Day_07","Day_07","Day_07","Day_07","Day_14","Day_14","Day_14","Day_14","Day_IP","Day_IP","Day_IP","Day_IP")
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts$Social.Status <- as.factor(Social.Status)
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts$Social.Status <- as.factor(Social.Status)
pcoa.cent.treats
View(pcoa.cent.dataframe.trts)
Social.Status <- c("communal","communal","communal","communal","dominant","dominant","dominant","dominant","isolate","isolate","isolate","isolate","subordinate","subordinate","subordinate","subordinate")
Day <- c("Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP",)
Day <- c("Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP")
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts$Social.Status <- as.factor(Social.Status)
pcoa.cent.dataframe.trts$Day <- as.factor(Day)
View(pcoa.cent.dataframe.trts)
#Plot
plot1a <- ggplot(pcoa.cent.dataframe.trts, aes(x=V1, y=V2, colour=Social.Status, shape=Day)) + theme_bw()
p <-plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=Social.Status), size=5, stroke = 0.75, show.legend = TRUE) +
scale_colour_manual(labels = c("dominant","subordinate","communal","isolate","water","pos control", "neg control"),
values = c("darkmagenta", "darkorange", "darkblue", "darkgreen", "deepskyblue", "darkgrey", "dimgrey")) +
theme(axis.title = element_text(size=14), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (34.2%)") + ylab("PCoA 2 (27.3%)") +
labs(colour = "Social Status") +
guides(colour = guide_legend(override.aes = list(pch=16,size = 4)))+
ggtitle(label="Social Status Zebrafish Gut Microbiomes") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic"))
p
p <-plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=Social.Status), size=5, stroke = 0.75, show.legend = TRUE) +
scale_colour_manual(labels = c("dominant","subordinate","communal","isolate"),
values = c("darkmagenta", "darkorange", "darkblue", "darkgreen")) +
scale_shape_manual(values = c(15,16,17,18))
#Plot
plot1a <- ggplot(pcoa.cent.dataframe.trts, aes(x=V1, y=V2, colour=Social.Status, shape=Day)) + theme_bw()
p <-plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=Social.Status), size=5, stroke = 0.75, show.legend = TRUE) +
scale_colour_manual(labels = c("dominant","subordinate","communal","isolate"),
values = c("darkmagenta", "darkorange", "darkblue", "darkgreen")) +
scale_shape_manual(values = c(15,16,17,18)) +
theme(axis.title = element_text(size=14), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (34.2%)") + ylab("PCoA 2 (27.3%)") +
labs(colour = "Social Status") +
guides(colour = guide_legend(override.aes = list(pch=16,size = 4)))+
ggtitle(label="Social Status Zebrafish Gut Microbiomes") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic"))
p
dataREL <- dataREL[, colSums(dataREL) > 0.05]
design.type <- new.data$Social.Status
bac.ind <- indval(dataREL, design.type)
#install.packages("labdsv")
library("labdsv")
dataREL <- dataREL[, colSums(dataREL) > 0.05]
design.type <- new.data$Social.Status
bac.ind <- indval(dataREL, design.type)
str(new.data)
droplevels(design.type)
bac.ind <- indval(dataREL, design.type)
group = interaction(new.data$Social.Status, new.data$Day)
design.type <- group
dataREL.t <- new.data[,-c(1:3)]
dataREL <- dataREL.t[, colSums(dataREL.t) > 0.05]
bac.ind <- indval(dataREL, design.type)
levels(design.type)
droplevels(new.data)
group = interaction(new.data$Social.Status, new.data$Day)
design.type <- group
dataREL.t <- new.data[,-c(1:3)]
dataREL <- dataREL.t[, colSums(dataREL.t) > 0.05]
bac.ind <- indval(dataREL, design.type)
group
levels(new.data)
str(new.data)
droplevels(new.data)
str(new.data)
droplevels(new.data$Social.Status)
str(new.data)
levels(new.data$Social.Status)
new.data.2 <- subset(new.data, Social.Status == "Communal" | Social.Status == "Dominant" | Social.Status == "Isolate" | Social.Status == "Subordinate")
str(new.data2)
str(new.data.2)
levels(new.data.2$Social.Status)
new.data.2 <- subset(new.data, Social.Status == "Communal" | Social.Status == "Dominant" | Social.Status == "Isolate" | Social.Status == "Subordinate")
new.data.2 <- subset(new.data, Social.Status == "Communal")
levels(new.data.2$Social.Status)
droplevels(new.data.t$Social.Status)
droplevels(new.data$Social.Status)
str(new.data)
droplevels(new.data$Social.Status)
group = interaction(new.data$Social.Status, new.data$Day)
group
new.data$Social.Status <- droplevels(new.data$Social.Status)
str(new.data)
new.data$Day <- droplevels(new.data$Day) #remove unused factor levels
str(new.data)
group = interaction(new.data$Social.Status, new.data$Day)
design.type <- group
dataREL.t <- new.data[,-c(1:3)]
dataREL <- dataREL.t[, colSums(dataREL.t) > 0.05]
bac.ind <- indval(dataREL, design.type)
levels(design.type)
summary(bac.ind)
inds <- which(bac.ind$pval <= 0.05)
bac.indicators <- as.data.frame(matrix(NA, nrow = length(inds), ncol = 4))
colnames(bac.indicators) <- c("OTU", "Cluster", "IndVal", "Prob")
bac.indicators$OTU <- names(inds)
bac.indicators$Cluster <- bac.ind$maxcls[inds]
bac.indicators$IndVal <- bac.ind$indcls[inds]
bac.indicators$Prob <- bac.ind$pval[inds]
ind.tax <- zf.tax[which(as.character(zf.tax$OTU) %in% zf.indicators$OTU), ]
ind.tax <- otu.tax[which(as.character(otu.tax$OTU) %in% otu.indicators$OTU), ]
bac.indicators$OTU <- names(inds)
bac.indicators$Cluster <- bac.ind$maxcls[inds]
bac.indicators$IndVal <- bac.ind$indcls[inds]
bac.indicators$Prob <- bac.ind$pval[inds]
ind.tax <- otu.tax[which(as.character(otu.tax$OTU) %in% bac.indicators$OTU), ]
ind.tax <- ind.tax[match(ind.tax$OTU, bac.indicators$OTU), ]
indicator.bac <- cbind(bac.indicators, ind.tax[, -c(1)])
indicator.bac <- indicator.bac[order(as.numeric(indicator.bac$Cluster)), ]
table(indicator.bac$Cluster)
table(indicator.bac$Phylum)
table(indicator.bac$Cluster)
levels(design.type)
# Export Bacteria Indicator Table
write.table(indicator.bac, "../data/BacterialIndicators_imitator_diet.txt",
sep="\t", row.names = F, quote = F)
# Export Bacteria Indicator Table
write.table(indicator.bac, "../data/BacterialIndicators_ZF.txt",
sep="\t", row.names = F, quote = F)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#setwd("~/Desktop/ES20_ZebrafishMicrobiomes/analyses")
setwd("~/Github/ES20_ZebrafishMicrobiomes/analyses")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
#install.packages('ggplot2')
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("nlme")
require("reshape")
require("ggplot2")
require("ade4")
require("png")
require ("agricolae")
require("tidyr")
require("dplyr")
require("reshape2")
require("picante")
#require("rarefy")
#require("rrarefy")
# Import Environmental Data
design <- read.csv("../data/ES_ZF_design.csv", row.names=1) #by setting working directory, you can use a shortcut filepath
# Import OTU data
# Import Raw Data
otu.in <- read.otu("../data/EM20_ZF_16S.opti_mcc.shared") #by setting working directory, you can use a shortcut filepath
# OTU table - remove otus w/ < 2 occurrences across all sites
otu_keep <- otu.in[, which(colSums(otu.in) >= 2)]
dim(otu_keep)
aa <- (rowSums(otu_keep))
aa
# OTU table - removed low abundance samples
otu_low_remov <- otu_keep[which(rowSums(otu_keep) >= 6000), ]
dim(otu_low_remov)
otu_final <- otu_low_remov[-c(94:97),] #removed Water, positive, negative
dim(otu_final)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("F_Iso4_D0","F_P3_D14","F_Iso6_D14","Water_R1","Water_R2","mock_positive","negative","positive")
design_final <- design[setdiff(rownames(design), odd.sites), ]
dim(design_final)
dim(otu_final)
otu_final <- otu_final[match(rownames(design_final), rownames(otu_final)),] #make sure rows are in the same order
all.equal(rownames(design_final), rownames(otu_final))
# Import Taxonomy File
otu.tax <- read.tax(taxonomy = "../data/EM20_ZF_16S.opti_mcc.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# Rarefy Abundances (min abundance is 10181. We are sampling to 10181)
min(rowSums(otu_final))
otus.r <- rrarefy(otu_final, 10181)
# Fisher's Alpha
fisher <- fisher.alpha(otus.r)
# Species Richness
#richness <- rowSums((PWESdata.r >= 1))
richness <- rowSums((otu_final >= 1))
# Shannon Diversity
shannon <- diversity(otus.r, "shannon")
# Simpson's Evenness
simp.even <- apply(otus.r, 1, simp_even)
#Pielou’s evenness
J <- shannon/log(specnumber(otus.r[,-c(1:1)]))
#combined richness, diversity, evenness
diversity <- cbind(design_final,richness,shannon,simp.even,J)
write.csv(diversity,"../data/zf_diversity.csv")
# Make Relative Abundance Matrices
dataREL <- otu_final
for(i in 1:dim(otu_final)[1]){
dataREL[i,] <- otu_final[i,]/sum(otu_final[i,])
}
#PERMANOVA
new.data <-cbind(design_final,dataREL)
adonis = adonis(new.data[,-c(1:3)]~Social.Status*Day, method = "bray", data = new.data, perm=1000, set.seed=42)
adonis
# Principal Coordinates Analysis
dataREL.dist <- vegdist(dataREL, method="bray")
pcoa <- cmdscale(dataREL.dist, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1b <- round(pcoa$eig[1] / sum(pcoa$eig), 3) * 100
explainvar2b <- round(pcoa$eig[2] / sum(pcoa$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #34.2
explainvar2b #27.3
pcoa.groups <- paste(new.data$Social.Status, new.data$Day, sep = "_")
pcoa.points <- data.frame(pcoa$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
Social.Status <- c("communal","communal","communal","communal","dominant","dominant","dominant","dominant","isolate","isolate","isolate","isolate","subordinate","subordinate","subordinate","subordinate")
Day <- c("Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP")
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts$Social.Status <- as.factor(Social.Status)
pcoa.cent.dataframe.trts$Day <- as.factor(Day)
#Plot
plot1a <- ggplot(pcoa.cent.dataframe.trts, aes(x=V1, y=V2, colour=Social.Status, shape=Day)) + theme_bw()
p <-plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=Social.Status), size=5, stroke = 0.75, show.legend = TRUE) +
scale_colour_manual(labels = c("dominant","subordinate","communal","isolate"),
values = c("darkmagenta", "darkorange", "darkblue", "darkgreen")) +
scale_shape_manual(values = c(15,16,17,18)) +
theme(axis.title = element_text(size=14), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (34.2%)") + ylab("PCoA 2 (27.3%)") +
labs(colour = "Social Status") +
guides(colour = guide_legend(override.aes = list(pch=16,size = 4)))+
ggtitle(label="Social Status Zebrafish Gut Microbiomes") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic"))
p
#ggsave("../figures/zf_PCoAordination.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=6, height=6, dpi=300, limitsize=TRUE)
#install.packages("labdsv")
library("labdsv")
new.data$Social.Status <- droplevels(new.data$Social.Status) #remove unused factor levels
new.data$Day <- droplevels(new.data$Day) #remove unused factor levels
group = interaction(new.data$Social.Status, new.data$Day)
design.type <- group
dataREL.t <- new.data[,-c(1:3)]
dataREL <- dataREL.t[, colSums(dataREL.t) > 0.05]
bac.ind <- indval(dataREL, design.type)
levels(design.type)
summary(bac.ind)
inds <- which(bac.ind$pval <= 0.05)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#setwd("~/Desktop/ES20_ZebrafishMicrobiomes/analyses")
setwd("~/Github/ES20_ZebrafishMicrobiomes/analyses")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
#install.packages('ggplot2')
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("nlme")
require("reshape")
require("ggplot2")
require("ade4")
require("png")
require ("agricolae")
require("tidyr")
require("dplyr")
require("reshape2")
require("picante")
#require("rarefy")
#require("rrarefy")
# Import Environmental Data
design <- read.csv("../data/ES_ZF_design.csv", row.names=1) #by setting working directory, you can use a shortcut filepath
# Import OTU data
# Import Raw Data
otu.in <- read.otu("../data/EM20_ZF_16S.opti_mcc.shared") #by setting working directory, you can use a shortcut filepath
# OTU table - remove otus w/ < 2 occurrences across all sites
otu_keep <- otu.in[, which(colSums(otu.in) >= 2)]
dim(otu_keep)
aa <- (rowSums(otu_keep))
aa
# OTU table - removed low abundance samples
otu_low_remov <- otu_keep[which(rowSums(otu_keep) >= 6000), ]
dim(otu_low_remov)
otu_final <- otu_low_remov[-c(94:97),] #removed Water, positive, negative
dim(otu_final)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("F_Iso4_D0","F_P3_D14","F_Iso6_D14","Water_R1","Water_R2","mock_positive","negative","positive")
design_final <- design[setdiff(rownames(design), odd.sites), ]
dim(design_final)
dim(otu_final)
otu_final <- otu_final[match(rownames(design_final), rownames(otu_final)),] #make sure rows are in the same order
all.equal(rownames(design_final), rownames(otu_final))
# Import Taxonomy File
otu.tax <- read.tax(taxonomy = "../data/EM20_ZF_16S.opti_mcc.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# Rarefy Abundances (min abundance is 10181. We are sampling to 10181)
min(rowSums(otu_final))
otus.r <- rrarefy(otu_final, 10181)
# Fisher's Alpha
fisher <- fisher.alpha(otus.r)
# Species Richness
#richness <- rowSums((PWESdata.r >= 1))
richness <- rowSums((otu_final >= 1))
# Shannon Diversity
shannon <- diversity(otus.r, "shannon")
# Simpson's Evenness
simp.even <- apply(otus.r, 1, simp_even)
#Pielou’s evenness
J <- shannon/log(specnumber(otus.r[,-c(1:1)]))
#combined richness, diversity, evenness
diversity <- cbind(design_final,richness,shannon,simp.even,J)
write.csv(diversity,"../data/zf_diversity.csv")
#summary table for bacterial diversity
summary <- diversity %>% group_by(Social.Status, Day) %>% summarise(mean.richness=mean(richness), se.richness=se(richness), mean.shannon=mean(shannon), se.shannon=se(shannon))
print(summary)
write.csv(summary,"../data/diversity.bact.summary.csv")
library(lmerTest)
richness.lm <- lm(richness ~ Social.Status*Day, data = diversity)
richness.lm
summary(richness.lm)
evenness.lm <- lm(simp.even ~ Social.Status*Day, data = diversity)
evenness.lm
summary(evenness.lm)
shannon.lm <- lm(shannon ~ Social.Status*Day, data = diversity)
shannon.lm
summary(shannon.lm)
# Graphing Richness
p <- ggplot(diversity, aes(x=Social.Status, y=richness, color=as.factor(Social.Status)))+
geom_boxplot() +
geom_point(aes(color=factor(Social.Status)), size=2, position = position_jitterdodge()) +
scale_color_manual(name="Social Status", values=c("darkmagenta", "darkorange", "darkblue", "darkgreen", "deepskyblue", "darkgrey", "dimgrey"), labels = c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control")) + facet_wrap(~Day)
richness <- p + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Social Status", y = "OTU Richness") +
theme(strip.text.x = element_text(size=14, face="italic"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) +
scale_x_discrete(breaks=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"), labels=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"))
richness
ggsave("../figures/richness.png", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
# Graphing Shannon Diversity
p <- ggplot(diversity, aes(x=Social.Status, y=shannon, color=as.factor(Social.Status)))+
geom_boxplot() +
geom_point(aes(color=factor(Social.Status)), size=2, position = position_jitterdodge()) +
scale_color_manual(name="Social Status", values=c("darkmagenta", "darkorange", "darkblue", "darkgreen", "deepskyblue", "darkgrey", "dimgrey"), labels = c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control")) + facet_wrap(~Day)
shannon <- p + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
labs(x = "Social Status", y = "Shannon Diversity Index (H')") +
theme(strip.text.x = element_text(size=14, face="italic"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) +
scale_x_discrete(breaks=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"), labels=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"))
shannon
ggsave("../figures/shannon.png", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
# Graphing Simpson's Evenness
p <- ggplot(diversity, aes(x=Social.Status, y=simp.even, color=as.factor(Social.Status)))+
geom_boxplot() +
geom_point(aes(color=factor(Social.Status)), size=2, position = position_jitterdodge()) +
scale_color_manual(name="Social Status", values=c("darkmagenta", "darkorange", "darkblue", "darkgreen", "deepskyblue", "darkgrey", "dimgrey"), labels = c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control")) + facet_wrap(~Day)
simpeven <- p + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
labs(x = "Social Status", y = "Simpson's Evenness") +
theme(strip.text.x = element_text(size=14, face="italic"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) +
scale_x_discrete(breaks=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"), labels=c("dominant", "subordinate", "communal", "isolate", "water", "pos control", "neg control"))
simpeven
ggsave("../figures/simpeven.png", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
# Make Relative Abundance Matrices
dataREL <- otu_final
for(i in 1:dim(otu_final)[1]){
dataREL[i,] <- otu_final[i,]/sum(otu_final[i,])
}
#PERMANOVA
new.data <-cbind(design_final,dataREL)
adonis = adonis(new.data[,-c(1:3)]~Social.Status*Day, method = "bray", data = new.data, perm=1000, set.seed=42)
adonis
# Principal Coordinates Analysis
dataREL.dist <- vegdist(dataREL, method="bray")
pcoa <- cmdscale(dataREL.dist, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1b <- round(pcoa$eig[1] / sum(pcoa$eig), 3) * 100
explainvar2b <- round(pcoa$eig[2] / sum(pcoa$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #34.2
explainvar2b #27.3
pcoa.groups <- paste(new.data$Social.Status, new.data$Day, sep = "_")
pcoa.points <- data.frame(pcoa$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
Social.Status <- c("communal","communal","communal","communal","dominant","dominant","dominant","dominant","isolate","isolate","isolate","isolate","subordinate","subordinate","subordinate","subordinate")
Day <- c("Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP","Day_0","Day_14","Day_07","Day_IP")
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts$Social.Status <- as.factor(Social.Status)
pcoa.cent.dataframe.trts$Day <- as.factor(Day)
#Plot
plot1a <- ggplot(pcoa.cent.dataframe.trts, aes(x=V1, y=V2, colour=Social.Status, shape=Day)) + theme_bw()
p <-plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=Social.Status), size=5, stroke = 0.75, show.legend = TRUE) +
scale_colour_manual(labels = c("dominant","subordinate","communal","isolate"),
values = c("darkmagenta", "darkorange", "darkblue", "darkgreen")) +
scale_shape_manual(values = c(15,16,17,18)) +
theme(axis.title = element_text(size=14), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (34.2%)") + ylab("PCoA 2 (27.3%)") +
labs(colour = "Social Status") +
guides(colour = guide_legend(override.aes = list(pch=16,size = 4)))+
ggtitle(label="Social Status Zebrafish Gut Microbiomes") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic"))
p
#ggsave("../figures/zf_PCoAordination.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=6, height=6, dpi=300, limitsize=TRUE)
ggsave("../figures/zf_PCoAordination.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=6, height=6, dpi=300, limitsize=TRUE)
